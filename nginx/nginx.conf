# user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 100000;
# Change the default thread pool settings
thread_pool default threads=2 max_queue=16384;

events {
  worker_connections 16384;

  # Serve many clients each thread (Linux only)
  use epoll;

  # Accept as many connections as possible
  multi_accept on;
}

rtmp {
  server {
    listen 1935;

    application live {
      live on;
      record off;
      push rtmp://streaming-app-nginx-rtmp/live;
    }
  }
}
http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;


    ssl_certificate /etc/ssl/yusufciraknet/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/yusufciraknet/private/nginx-selfsigned.key;

  # Copies data between one FD and other from within the kernel
  # faster than read() + write()
  sendfile on;

  # Use the default thread pool for asynchronous file I/O
  aio threads;

  # Only use AIO is used for when larger than or equal to this size
  directio 6m;

  # Send headers in one piece, it is better than sending them one by one
  tcp_nopush on;

  # Don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  # Disable logging if a file can't be found
  log_not_found off;

  # Server will close connection after this time
  keepalive_timeout 15s;

  # Max size of types hash tables (processing static sets of data. eg. server names, map directives or mime types)
  types_hash_max_size 2048;

  # Max allowed size of the client request body
  client_max_body_size 250M;

  # If the request body size is more than the buffer size, then the entire (or partial)
  # request body is written into a temporary file
  client_body_buffer_size 512k;

  # Request timed out
  client_body_timeout 12;
  client_header_timeout 12;
  send_timeout 10;

  # Allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;


  # Security reasons, turn off nginx versions
  server_tokens off;

  ssl_early_data on;

  client_header_buffer_size 1k;
  large_client_header_buffers 4 32k;


  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml application/vnd.ms-fontobject application/x-font-ttf font/opentype;
  gzip_vary on;
  gzip_min_length 1000;
  gzip_buffers 16 8k;
  gzip_proxied any;


  log_format main '
  IpAddress: $http_cf_connecting_ip
  TimeLocal: $time_local
  Url : $scheme://$host$request_uri
  UserAgent: $http_user_agent
  ';


  limit_req_zone "$http_cf_connecting_ip" zone=zone:100m rate=50r/s;
  limit_req zone=zone burst=50 nodelay;
  underscores_in_headers on;

  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log;


  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;

  # # Ensure WebSocket headers are passed
  # proxy_set_header Upgrade $http_upgrade;
  # proxy_set_header Connection "upgrade";
  # proxy_buffering off; # Keep this if you need WebSocket support; otherwise, consider enabling it.

  server {
    server_name stream.yusufcirak.net;
    listen 443 ssl;
    listen [::]:443 ssl;

    location /hls {
      proxy_pass http://streaming-app-nginx-rtmp:80;
      # Disable cache
      add_header Cache-Control no-cache;

      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
    }

    location /api {
      proxy_pass http://streaming-app-backend:8080;
    }

    location /_stream {
      proxy_buffering off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_cache_bypass $http_upgrade;
      proxy_pass http://streaming-app-backend:8080;

    }

    location / {
      # serve static files from the nginx container
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      proxy_read_timeout 360s;
      sendfile_max_chunk 1m;
      proxy_pass http://streaming-app-frontend:80;
    }
  }

  server {
    server_name yusufcirak.net;

    listen 443 ssl;
    listen [::]:443 ssl;

    location / {
      proxy_pass http://portfolio:80;
    }

  }

  server {
    server_name chat.yusufcirak.net;

    listen 443 ssl;
    listen [::]:443 ssl;


    location /_api {
      proxy_pass http://backend:80;
    }

    location /_chat {
      proxy_buffering off;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_cache_bypass $http_upgrade;
      proxy_pass http://backend:80;

    }

    location / {
      # serve static files from the nginx container
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      proxy_read_timeout 360s;
      sendfile_max_chunk 1m;
      proxy_pass http://frontend:80;
    }

  }

  server {
    server_name dc.yusufcirak.net;

    listen 443 ssl;
    listen [::]:443 ssl;

    proxy_buffering off; # Keep this if you need WebSocket support; otherwise, consider enabling it.

    # Handle WebSocket connections
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $http_upgrade;

    proxy_read_timeout 60s; # Adjust as necessary; consider lowering this if not needed.

    location / {
      proxy_pass http://discord-clone-app:3000;
    }
  }


  server {
    server_name coolify.yusufcirak.net;

    listen 443 ssl;
    listen [::]:443 ssl;


    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_cache_bypass $http_upgrade;
    proxy_buffering off;

    location / {
      proxy_pass http://coolify:80;
    }
  }


  # server {
  #   server_name n8n.yusufcirak.net;

  #   listen 443 ssl;
  #   listen [::]:443 ssl;

  #   ssl_certificate /etc/ssl/yusufciraknet/certs/nginx-selfsigned.crt;
  #   ssl_certificate_key /etc/ssl/yusufciraknet/private/nginx-selfsigned.key;

  #   proxy_set_header Upgrade $http_upgrade;
  #   proxy_set_header Connection "upgrade";
  #   proxy_cache_bypass $http_upgrade;
  #   proxy_buffering off;

  #   location / {
  #     proxy_pass http://n8n:5678;
  #   }
  # }


  server {
    server_name beszel.yusufcirak.net;

    listen 443 ssl;
    listen [::]:443 ssl;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_cache_bypass $http_upgrade;
    proxy_buffering off;

    location / {
      proxy_pass http://beszel:8090;
    }
  }


  # server {
  #   server_name tumeraltunbas.com;
  #   listen 443 ssl http2;
  #   listen [::]:443 ssl http2;
  #   ssl_certificate /etc/ssl/tumeraltunbascom/certs/nginx-selfsigned.crt;
  #   ssl_certificate_key /etc/ssl/tumeraltunbascom/private/nginx-selfsigned.key;
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   location /api {
  #     proxy_buffer_size 128k;
  #     proxy_buffers 4 256k;
  #     proxy_busy_buffers_size 256k;
  #     proxy_pass http://ta-backend:8080; # Proxy requests to your API server
  #   }
  #   location / {
  #     proxy_pass http://ta-frontend:80;
  #   }
  # }
}
